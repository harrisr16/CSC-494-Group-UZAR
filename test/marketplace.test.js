const assert = require("assert");
const chai = require("chai");
const ganache = require("ganache");
const Web3 = require("web3");
const web3 = new Web3(ganache.provider());
const abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "location",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "quant",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			}
		],
		"name": "addItem",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "rep",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "location",
				"type": "string"
			}
		],
		"name": "addRep",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "addr",
				"type": "address"
			}
		],
		"name": "approveRequest",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "newPrice",
				"type": "uint256"
			}
		],
		"name": "changeMarketPrice",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "addr",
				"type": "address"
			}
		],
		"name": "getRequestAddress",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "addr",
				"type": "address"
			}
		],
		"name": "isApproved",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "addr",
				"type": "address"
			}
		],
		"name": "isRep",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "isValidID",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "qty",
				"type": "uint256"
			}
		],
		"name": "isValidQuantity",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "itemList",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "location",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "quant",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "dateArrived",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"components": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "location",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "quant",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "dateArrived",
						"type": "uint256"
					}
				],
				"internalType": "struct Marketplace.item",
				"name": "currItem",
				"type": "tuple"
			}
		],
		"name": "itemToString",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "manager",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "marketplaceItems",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "location",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "quant",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "dateArrived",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "publishItems",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "publishMarket",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "publishedItems",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "qty",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "flag",
				"type": "uint256"
			}
		],
		"name": "removeFromMarketplace",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "addr",
				"type": "address"
			}
		],
		"name": "removeRep",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "representatives",
		"outputs": [
			{
				"internalType": "address",
				"name": "rep",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "location",
				"type": "string"
			},
			{
				"internalType": "int256",
				"name": "idrep",
				"type": "int256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			}
		],
		"name": "requestItem",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];
const bytecode = "608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614ba18061005c5f395ff3fe608060405234801561000f575f80fd5b506004361061012a575f3560e01c8063673448dd116100ab578063ad0be0da1161006f578063ad0be0da1461036c578063b59eaba51461039c578063e02e6f4b146103cc578063e1debaca146103fe578063ffceace21461041a5761012a565b8063673448dd146102b857806375ec4452146102d45780637f316171146102f05780639939f30a146103205780639b14cf21146103505761012a565b806331b88545116100f257806331b88545146101fb5780633d4d36001461022b578063422d542114610260578063481c6a751461027c5780635282c72c1461029a5761012a565b8063050568481461012e578063061dff9a1461014a5780630d9f41c51461016657806318b616bb1461019657806327749016146101cb575b5f80fd5b61014860048036038101906101439190613007565b610424565b005b610164600480360381019061015f9190613007565b610573565b005b610180600480360381019061017b9190613065565b610773565b60405161018d91906130aa565b60405180910390f35b6101b060048036038101906101ab9190613065565b6107d6565b6040516101c29695949392919061315c565b60405180910390f35b6101e560048036038101906101e09190613007565b610929565b6040516101f291906130aa565b60405180910390f35b610215600480360381019061021091906131c9565b6109d7565b60405161022291906130aa565b60405180910390f35b61024560048036038101906102409190613065565b610aac565b6040516102579695949392919061315c565b60405180910390f35b61027a60048036038101906102759190613268565b610bff565b005b610284610ea3565b60405161029191906132c2565b60405180910390f35b6102a2610ec6565b6040516102af91906132db565b60405180910390f35b6102d260048036038101906102cd9190613007565b611090565b005b6102ee60048036038101906102e99190613423565b61127c565b005b61030a6004803603810190610305919061355a565b6113f1565b60405161031791906132db565b60405180910390f35b61033a60048036038101906103359190613007565b611460565b60405161034791906132c2565b60405180910390f35b61036a600480360381019061036591906131c9565b6114c7565b005b610386600480360381019061038191906135a1565b611593565b60405161039391906135f1565b60405180910390f35b6103b660048036038101906103b19190613065565b6117c8565b6040516103c391906132db565b60405180910390f35b6103e660048036038101906103e19190613065565b61186e565b6040516103f593929190613622565b60405180910390f35b6104186004803603810190610413919061365e565b611948565b005b610422611a44565b005b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047a575f80fd5b5f5b60028054905081101561056f578173ffffffffffffffffffffffffffffffffffffffff16600282815481106104b4576104b361370d565b5b905f5260205f2090600302015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361055c57600281815481106105115761051061370d565b5b905f5260205f2090600302015f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6105529190612ef6565b600282015f905550505b808061056790613767565b91505061047c565b5050565b60055f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff1615610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f79061381e565b60405180910390fd5b61060933610929565b610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063f906138ac565b60405180910390fd5b60055f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610710576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107079061393a565b60405180910390fd5b600160055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f8282546107609190613958565b9250508190555061077081611090565b50565b5f805f90505b6001805490508110156107cc576001818154811061079a5761079961370d565b5b905f5260205f2090600602015f015483036107b95760019150506107d1565b80806107c490613767565b915050610779565b505f90505b919050565b600481815481106107e5575f80fd5b905f5260205f2090600602015f91509050805f01549080600101805461080a906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610836906139b8565b80156108815780601f1061085857610100808354040283529160200191610881565b820191905f5260205f20905b81548152906001019060200180831161086457829003601f168201915b505050505090806002018054610896906139b8565b80601f01602080910402602001604051908101604052809291908181526020018280546108c2906139b8565b801561090d5780601f106108e45761010080835404028352916020019161090d565b820191905f5260205f20905b8154815290600101906020018083116108f057829003601f168201915b5050505050908060030154908060040154908060050154905086565b5f805f90505b6002805490508110156109cd57600281815481106109505761094f61370d565b5b905f5260205f2090600302015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109ba5760019150506109d2565b80806109c590613767565b91505061092f565b505f90505b919050565b5f6109e183610773565b610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1790613a32565b60405180910390fd5b5f5b600180549050811015610aa15760018181548110610a4357610a4261370d565b5b905f5260205f2090600602015f01548403610a8e578260018281548110610a6d57610a6c61370d565b5b905f5260205f209060060201600301541115610a8d576001915050610aa6565b5b8080610a9990613767565b915050610a22565b505f90505b92915050565b60018181548110610abb575f80fd5b905f5260205f2090600602015f91509050805f015490806001018054610ae0906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c906139b8565b8015610b575780601f10610b2e57610100808354040283529160200191610b57565b820191905f5260205f20905b815481529060010190602001808311610b3a57829003601f168201915b505050505090806002018054610b6c906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b98906139b8565b8015610be35780601f10610bba57610100808354040283529160200191610be3565b820191905f5260205f20905b815481529060010190602001808311610bc657829003601f168201915b5050505050908060030154908060040154908060050154905086565b610c0833610929565b610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e906138ac565b60405180910390fd5b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20905033815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f81600201819055505f5b83839050811015610e9d575f610d01858584818110610cf557610cf461370d565b5b90506020020135611ef0565b604051602001610d119190613b20565b6040516020818303038152906040529050610d44858584818110610d3857610d3761370d565b5b90506020020135610773565b8190610d86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7d91906132db565b60405180910390fd5b505f5b600180549050811015610e8857858584818110610da957610da861370d565b5b9050602002013560018281548110610dc457610dc361370d565b5b905f5260205f2090600602015f015403610e75578360010160018281548110610df057610def61370d565b5b905f5260205f209060060201908060018154018082558091505060019003905f5260205f2090600602015f909190919091505f820154815f015560018201816001019081610e3e9190613d02565b5060028201816002019081610e539190613d02565b5060038201548160030155600482015481600401556005820154816005015550505b8080610e8090613767565b915050610d89565b50508080610e9590613767565b915050610cd3565b50505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060805f5b600480549050811015611088578161105360048381548110610ef057610eef61370d565b5b905f5260205f2090600602016040518060c00160405290815f8201548152602001600182018054610f20906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4c906139b8565b8015610f975780601f10610f6e57610100808354040283529160200191610f97565b820191905f5260205f20905b815481529060010190602001808311610f7a57829003601f168201915b50505050508152602001600282018054610fb0906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fdc906139b8565b80156110275780601f10610ffe57610100808354040283529160200191611027565b820191905f5260205f20905b81548152906001019060200180831161100a57829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815250506113f1565b604051602001611064929190613e57565b6040516020818303038152906040529150808061108090613767565b915050610ecb565b508091505090565b600280805490506110a19190613eb2565b60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201541061127957600160055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f6101000a81548160ff0219169083151502179055505f5b60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001018054905081101561127757600460055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010182815481106111e0576111df61370d565b5b905f5260205f209060060201908060018154018082558091505060019003905f5260205f2090600602015f909190919091505f820154815f01556001820181600101908161122e9190613d02565b50600282018160020190816112439190613d02565b506003820154816003015560048201548160040155600582015481600501555050808061126f90613767565b915050611141565b505b50565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d2575f80fd5b5f815111611315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130c90613f2c565b60405180910390fd5b61131d612f33565b82815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818160200181905250600281908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816113df9190613f4a565b50604082015181600201555050505050565b606080611400835f0151611ef0565b836020015184604001516114178660600151611ef0565b6114248760800151611ef0565b6114318860a00151611ef0565b604051602001611446969594939291906140fd565b604051602081830303815290604052905080915050919050565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6114d033610929565b6114d8575f80fd5b5f811161151a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611511906141f8565b60405180910390fd5b5f5b60048054905081101561158e57826004828154811061153e5761153d61370d565b5b905f5260205f2090600602015f01540361157b5781600482815481106115675761156661370d565b5b905f5260205f209060060201600401819055505b808061158690613767565b91505061151c565b505050565b5f61159d33610929565b6115a5575f80fd5b5f8214806115b35750600182145b806115be5750600282145b6115fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f490614286565b60405180910390fd5b5f5b6004805490508110156117bd5784600482815481106116215761162061370d565b5b905f5260205f2090600602015f0154036117aa57600481815481106116495761164861370d565b5b905f5260205f20906006020160030154841115611688600483815481106116735761167261370d565b5b905f5260205f20906006020160030154611ef0565b6040516020016116989190614314565b604051602081830303815290604052906116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df91906132db565b60405180910390fd5b50600481815481106116fd576116fc61370d565b5b905f5260205f20906006020160030154840361177057600481815481106117275761172661370d565b5b905f5260205f2090600602015f8082015f9055600182015f6117499190612ef6565b600282015f6117589190612ef6565b600382015f9055600482015f9055600582015f905550505b83600482815481106117855761178461370d565b5b905f5260205f2090600602016003015f8282546117a29190614344565b925050819055505b80806117b590613767565b9150506115ff565b508190509392505050565b600381815481106117d7575f80fd5b905f5260205f20015f9150905080546117ef906139b8565b80601f016020809104026020016040519081016040528092919081815260200182805461181b906139b8565b80156118665780601f1061183d57610100808354040283529160200191611866565b820191905f5260205f20905b81548152906001019060200180831161184957829003601f168201915b505050505081565b6002818154811061187d575f80fd5b905f5260205f2090600302015f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546118c1906139b8565b80601f01602080910402602001604051908101604052809291908181526020018280546118ed906139b8565b80156119385780601f1061190f57610100808354040283529160200191611938565b820191905f5260205f20905b81548152906001019060200180831161191b57829003601f168201915b5050505050908060020154905083565b5f6001808160018154018082558091505003905f5260205f20906006020190505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ec906143e7565b60405180910390fd5b85815f018190555084816001019081611a0e9190613f4a565b5083816002019081611a209190613f4a565b50828160030181905550818160040181905550428160050181905550505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac8906143e7565b60405180910390fd5b5f5b600180549050811015611eed57611ae8612f68565b611af181611fba565b9050611b5f6040518060400160405280600281526020017f494400000000000000000000000000000000000000000000000000000000000081525060018481548110611b4057611b3f61370d565b5b905f5260205f2090600602015f015483611ff39092919063ffffffff16565b9050611c546040518060400160405280600881526020017f4c6f636174696f6e00000000000000000000000000000000000000000000000081525060018481548110611bae57611bad61370d565b5b905f5260205f2090600602016001018054611bc8906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf4906139b8565b8015611c3f5780601f10611c1657610100808354040283529160200191611c3f565b820191905f5260205f20905b815481529060010190602001808311611c2257829003601f168201915b5050505050836120b99092919063ffffffff16565b9050611d496040518060400160405280600481526020017f4e616d650000000000000000000000000000000000000000000000000000000081525060018481548110611ca357611ca261370d565b5b905f5260205f2090600602016002018054611cbd906139b8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ce9906139b8565b8015611d345780601f10611d0b57610100808354040283529160200191611d34565b820191905f5260205f20905b815481529060010190602001808311611d1757829003601f168201915b5050505050836120b99092919063ffffffff16565b9050611db86040518060400160405280600881526020017f5175616e7469747900000000000000000000000000000000000000000000000081525060018481548110611d9857611d9761370d565b5b905f5260205f2090600602016003015483611ff39092919063ffffffff16565b9050611e276040518060400160405280600581526020017f507269636500000000000000000000000000000000000000000000000000000081525060018481548110611e0757611e0661370d565b5b905f5260205f2090600602016004015483611ff39092919063ffffffff16565b9050611e966040518060400160405280600c81526020017f446174652041727269766564000000000000000000000000000000000000000081525060018481548110611e7657611e7561370d565b5b905f5260205f2090600602016005015483611ff39092919063ffffffff16565b9050611ea18161217c565b905060038160200151908060018154018082558091505060019003905f5260205f20015f909190919091509081611ed89190613f4a565b50508080611ee590613767565b915050611ad3565b50565b60605f6001611efe846121b5565b0190505f8167ffffffffffffffff811115611f1c57611f1b6132ff565b5b6040519080825280601f01601f191660200182016040528015611f4e5781602001600182028036833780820191505090505b5090505f82602001820190505b600115611faf578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611fa457611fa3613e85565b5b0494505f8503611f5b575b819350505050919050565b611fc2612f68565b611fec827f7b00000000000000000000000000000000000000000000000000000000000000612306565b9050919050565b611ffb612f68565b5f845f015112156120655783602001517f2c0000000000000000000000000000000000000000000000000000000000000084612036856123ea565b60405160200161204994939291906144e4565b604051602081830303815290604052846020018190525061209e565b836020015183612074846123ea565b6040516020016120869392919061453b565b60405160208183030381529060405284602001819052505b6120a78461255b565b845f0181815250508390509392505050565b6120c1612f68565b5f6120cb8361256e565b90505f855f0151121561212f5784602001517f2c00000000000000000000000000000000000000000000000000000000000000858360405160200161211394939291906145cb565b6040516020818303038152906040528560200181905250612160565b846020015184826040516020016121489392919061462d565b60405160208183030381529060405285602001819052505b6121698561255b565b855f018181525050849150509392505050565b612184612f68565b6121ae827f7d00000000000000000000000000000000000000000000000000000000000000612e53565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612211577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161220757612206613e85565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061224e576d04ee2d6d415b85acef8100000000838161224457612243613e85565b5b0492506020810190505b662386f26fc10000831061227d57662386f26fc10000838161227357612272613e85565b5b0492506010810190505b6305f5e10083106122a6576305f5e100838161229c5761229b613e85565b5b0492506008810190505b61271083106122cb5761271083816122c1576122c0613e85565b5b0492506004810190505b606483106122ee57606483816122e4576122e3613e85565b5b0492506002810190505b600a83106122fd576001810190505b80915050919050565b61230e612f68565b5f835f0151121561236e5782602001517f2c00000000000000000000000000000000000000000000000000000000000000836040516020016123529392919061467e565b604051602081830303815290604052836020018190525061239d565b8260200151826040516020016123859291906146b6565b60405160208183030381529060405283602001819052505b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff835f018181511691508181525050825f0180518091906123dd906146dd565b8152505082905092915050565b60605f8203612430576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612556565b5f8290505f5b5f821461245f57808061244890613767565b915050600a826124589190613eb2565b9150612436565b5f8167ffffffffffffffff81111561247a576124796132ff565b5b6040519080825280601f01601f1916602001820160405280156124ac5781602001600182028036833780820191505090505b5090505f8290505b5f861461254e57600a80876124c99190613eb2565b6124d39190614724565b866124de9190614344565b60306124ea9190614771565b60f81b82826124f8906147a5565b9250828151811061250c5761250b61370d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a866125479190613eb2565b95506124b4565b819450505050505b919050565b5f60ff6001901b825f0151179050919050565b60605f8290505f805b825181101561293b57605c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106125ba576125b961370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036125f5576001915061293b565b602260f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061262f5761262e61370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361266a576001915061293b565b602f60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106126a4576126a361370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036126df576001915061293b565b600960f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106127195761271861370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612754576001915061293b565b600c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061278e5761278d61370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036127c9576001915061293b565b600a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106128035761280261370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361283e576001915061293b565b600d60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106128785761287761370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036128b3576001915061293b565b600860f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106128ed576128ec61370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612928576001915061293b565b808061293390613767565b915050612577565b508061294b578392505050612e4e565b5f5b8251811015612e4a57605c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106129905761298f61370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036129e957836040516020016129d39190614816565b6040516020818303038152906040529350612e37565b602260f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612a2357612a2261370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612a7c5783604051602001612a669190614881565b6040516020818303038152906040529350612e36565b602f60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612ab657612ab561370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612b0f5783604051602001612af991906148ec565b6040516020818303038152906040529350612e35565b600960f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612b4957612b4861370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612ba25783604051602001612b8c9190614957565b6040516020818303038152906040529350612e34565b600c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612bdc57612bdb61370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612c355783604051602001612c1f91906149c2565b6040516020818303038152906040529350612e33565b600a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612c6f57612c6e61370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612cc85783604051602001612cb29190614a2d565b6040516020818303038152906040529350612e32565b600d60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612d0257612d0161370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612d5b5783604051602001612d459190614a98565b6040516020818303038152906040529350612e31565b600860f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612d9557612d9461370d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603612dee5783604051602001612dd89190614b03565b6040516020818303038152906040529350612e30565b83838281518110612e0257612e0161370d565b5b602001015160f81c60f81b604051602001612e1e9291906146b6565b60405160208183030381529060405293505b5b5b5b5b5b5b5b8080612e4290613767565b91505061294d565b5050505b919050565b612e5b612f68565b826020015182604051602001612e729291906146b6565b6040516020818303038152906040528360200181905250612e928361255b565b835f0181815250505f612ea484612ec8565b14612ebf57825f018051809190612eba90614b24565b815250505b82905092915050565b5f7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff825f0151169050919050565b508054612f02906139b8565b5f825580601f10612f135750612f30565b601f0160209004905f5260205f2090810190612f2f9190612f81565b5b50565b60405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020015f81525090565b60405180604001604052805f8152602001606081525090565b5b80821115612f98575f815f905550600101612f82565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612fd682612fad565b9050919050565b612fe681612fcc565b8114612ff0575f80fd5b50565b5f8135905061300181612fdd565b92915050565b5f6020828403121561301c5761301b612fa5565b5b5f61302984828501612ff3565b91505092915050565b5f819050919050565b61304481613032565b811461304e575f80fd5b50565b5f8135905061305f8161303b565b92915050565b5f6020828403121561307a57613079612fa5565b5b5f61308784828501613051565b91505092915050565b5f8115159050919050565b6130a481613090565b82525050565b5f6020820190506130bd5f83018461309b565b92915050565b6130cc81613032565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156131095780820151818401526020810190506130ee565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61312e826130d2565b61313881856130dc565b93506131488185602086016130ec565b61315181613114565b840191505092915050565b5f60c08201905061316f5f8301896130c3565b81810360208301526131818188613124565b905081810360408301526131958187613124565b90506131a460608301866130c3565b6131b160808301856130c3565b6131be60a08301846130c3565b979650505050505050565b5f80604083850312156131df576131de612fa5565b5b5f6131ec85828601613051565b92505060206131fd85828601613051565b9150509250929050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261322857613227613207565b5b8235905067ffffffffffffffff8111156132455761324461320b565b5b6020830191508360208202830111156132615761326061320f565b5b9250929050565b5f806020838503121561327e5761327d612fa5565b5b5f83013567ffffffffffffffff81111561329b5761329a612fa9565b5b6132a785828601613213565b92509250509250929050565b6132bc81612fcc565b82525050565b5f6020820190506132d55f8301846132b3565b92915050565b5f6020820190508181035f8301526132f38184613124565b905092915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61333582613114565b810181811067ffffffffffffffff82111715613354576133536132ff565b5b80604052505050565b5f613366612f9c565b9050613372828261332c565b919050565b5f67ffffffffffffffff821115613391576133906132ff565b5b61339a82613114565b9050602081019050919050565b828183375f83830152505050565b5f6133c76133c284613377565b61335d565b9050828152602081018484840111156133e3576133e26132fb565b5b6133ee8482856133a7565b509392505050565b5f82601f83011261340a57613409613207565b5b813561341a8482602086016133b5565b91505092915050565b5f806040838503121561343957613438612fa5565b5b5f61344685828601612ff3565b925050602083013567ffffffffffffffff81111561346757613466612fa9565b5b613473858286016133f6565b9150509250929050565b5f80fd5b5f80fd5b5f60c0828403121561349a5761349961347d565b5b6134a460c061335d565b90505f6134b384828501613051565b5f83015250602082013567ffffffffffffffff8111156134d6576134d5613481565b5b6134e2848285016133f6565b602083015250604082013567ffffffffffffffff81111561350657613505613481565b5b613512848285016133f6565b604083015250606061352684828501613051565b606083015250608061353a84828501613051565b60808301525060a061354e84828501613051565b60a08301525092915050565b5f6020828403121561356f5761356e612fa5565b5b5f82013567ffffffffffffffff81111561358c5761358b612fa9565b5b61359884828501613485565b91505092915050565b5f805f606084860312156135b8576135b7612fa5565b5b5f6135c586828701613051565b93505060206135d686828701613051565b92505060406135e786828701613051565b9150509250925092565b5f6020820190506136045f8301846130c3565b92915050565b5f819050919050565b61361c8161360a565b82525050565b5f6060820190506136355f8301866132b3565b81810360208301526136478185613124565b90506136566040830184613613565b949350505050565b5f805f805f60a0868803121561367757613676612fa5565b5b5f61368488828901613051565b955050602086013567ffffffffffffffff8111156136a5576136a4612fa9565b5b6136b1888289016133f6565b945050604086013567ffffffffffffffff8111156136d2576136d1612fa9565b5b6136de888289016133f6565b93505060606136ef88828901613051565b925050608061370088828901613051565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61377182613032565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036137a3576137a261373a565b5b600182019050919050565b7f5468697320726571756573742068617320616c7265616479206265656e2061705f8201527f70726f7665642100000000000000000000000000000000000000000000000000602082015250565b5f6138086027836130dc565b9150613813826137ae565b604082019050919050565b5f6020820190508181035f830152613835816137fc565b9050919050565b7f596f75206d757374206265206120726570726573656e74617469766520746f205f8201527f7573652074686973206665617475726521000000000000000000000000000000602082015250565b5f6138966031836130dc565b91506138a18261383c565b604082019050919050565b5f6020820190508181035f8301526138c38161388a565b9050919050565b7f596f75206861766520616c726561647920617070726f766564207468697320725f8201527f6571756573742100000000000000000000000000000000000000000000000000602082015250565b5f6139246027836130dc565b915061392f826138ca565b604082019050919050565b5f6020820190508181035f83015261395181613918565b9050919050565b5f61396282613032565b915061396d83613032565b92508282019050808211156139855761398461373a565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806139cf57607f821691505b6020821081036139e2576139e161398b565b5b50919050565b7f4e6f7420612076616c69642049440000000000000000000000000000000000005f82015250565b5f613a1c600e836130dc565b9150613a27826139e8565b602082019050919050565b5f6020820190508181035f830152613a4981613a10565b9050919050565b5f81905092915050565b7f4e6f7420612076616c6964206974656d204944206174204944206e756d6265725f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f613ab4602283613a50565b9150613abf82613a5a565b602282019050919050565b5f613ad4826130d2565b613ade8185613a50565b9350613aee8185602086016130ec565b80840191505092915050565b7f2100000000000000000000000000000000000000000000000000000000000000815250565b5f613b2a82613aa8565b9150613b368284613aca565b9150613b4182613afa565b60018201915081905092915050565b5f81549050613b5e816139b8565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613bc17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613b86565b613bcb8683613b86565b95508019841693508086168417925050509392505050565b5f819050919050565b5f613c06613c01613bfc84613032565b613be3565b613032565b9050919050565b5f819050919050565b613c1f83613bec565b613c33613c2b82613c0d565b848454613b92565b825550505050565b5f90565b613c47613c3b565b613c52818484613c16565b505050565b5b81811015613c7557613c6a5f82613c3f565b600181019050613c58565b5050565b601f821115613cba57613c8b81613b65565b613c9484613b77565b81016020851015613ca3578190505b613cb7613caf85613b77565b830182613c57565b50505b505050565b5f82821c905092915050565b5f613cda5f1984600802613cbf565b1980831691505092915050565b5f613cf28383613ccb565b9150826002028217905092915050565b818103613d10575050613de5565b613d1982613b50565b67ffffffffffffffff811115613d3257613d316132ff565b5b613d3c82546139b8565b613d47828285613c79565b5f601f831160018114613d74575f8415613d62578287015490505b613d6c8582613ce7565b865550613dde565b601f198416613d8287613b65565b9650613d8d86613b65565b5f5b82811015613db457848901548255600182019150600185019450602081019050613d8f565b86831015613dd15784890154613dcd601f891682613ccb565b8355505b6001600288020188555050505b5050505050505b565b7f0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d5f8201527f2d2d2d0a00000000000000000000000000000000000000000000000000000000602082015250565b5f613e41602483613a50565b9150613e4c82613de7565b602482019050919050565b5f613e628285613aca565b9150613e6d82613e35565b9150613e798284613aca565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613ebc82613032565b9150613ec783613032565b925082613ed757613ed6613e85565b5b828204905092915050565b7f4c6f636174696f6e2063616e6e6f74206265206e756c6c2100000000000000005f82015250565b5f613f166018836130dc565b9150613f2182613ee2565b602082019050919050565b5f6020820190508181035f830152613f4381613f0a565b9050919050565b613f53826130d2565b67ffffffffffffffff811115613f6c57613f6b6132ff565b5b613f7682546139b8565b613f81828285613c79565b5f60209050601f831160018114613fb2575f8415613fa0578287015190505b613faa8582613ce7565b865550614011565b601f198416613fc086613b65565b5f5b82811015613fe757848901518255600182019150602085019450602081019050613fc2565b868310156140045784890151614000601f891682613ccb565b8355505b6001600288020188555050505b505050505050565b7f49443a2000000000000000000000000000000000000000000000000000000000815250565b7f0a4c6f636174696f6e3a20000000000000000000000000000000000000000000815250565b7f0a4e616d653a2000000000000000000000000000000000000000000000000000815250565b7f0a5175616e746974793a20000000000000000000000000000000000000000000815250565b7f0a50726963653a20000000000000000000000000000000000000000000000000815250565b7f0a4461746520417272697665643a200000000000000000000000000000000000815250565b5f61410782614019565b6004820191506141178289613aca565b91506141228261403f565b600b820191506141328288613aca565b915061413d82614065565b60078201915061414d8287613aca565b91506141588261408b565b600b820191506141688286613aca565b9150614173826140b1565b6008820191506141838285613aca565b915061418e826140d7565b600f8201915061419e8284613aca565b9150819050979650505050505050565b7f50726963652063616e6e6f7420626520302100000000000000000000000000005f82015250565b5f6141e26012836130dc565b91506141ed826141ae565b602082019050919050565b5f6020820190508181035f83015261420f816141d6565b9050919050565b7f4d7573742063686f6f736520612076616c696420666c616720626974206e756d5f8201527f6265722028302c20312c206f7220322921000000000000000000000000000000602082015250565b5f6142706031836130dc565b915061427b82614216565b604082019050919050565b5f6020820190508181035f83015261429d81614264565b9050919050565b7f496e76616c6964207175616e746974792c2063757272656e742073746f636b205f8201527f69733a2000000000000000000000000000000000000000000000000000000000602082015250565b5f6142fe602483613a50565b9150614309826142a4565b602482019050919050565b5f61431e826142f2565b915061432a8284613aca565b915061433582613afa565b60018201915081905092915050565b5f61434e82613032565b915061435983613032565b92508282039050818111156143715761437061373a565b5b92915050565b7f4f6e6c7920746865206d616e61676572206d61792075736520746869732066655f8201527f6174757265210000000000000000000000000000000000000000000000000000602082015250565b5f6143d16026836130dc565b91506143dc82614377565b604082019050919050565b5f6020820190508181035f8301526143fe816143c5565b9050919050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b61444a61444582614405565b614430565b82525050565b7f22000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614484600183613a50565b915061448f82614450565b600182019050919050565b7f223a2000000000000000000000000000000000000000000000000000000000005f82015250565b5f6144ce600383613a50565b91506144d98261449a565b600382019050919050565b5f6144ef8287613aca565b91506144fb8286614439565b60018201915061450a82614478565b91506145168285613aca565b9150614521826144c2565b915061452d8284613aca565b915081905095945050505050565b5f6145468286613aca565b915061455182614478565b915061455d8285613aca565b9150614568826144c2565b91506145748284613aca565b9150819050949350505050565b7f223a2022000000000000000000000000000000000000000000000000000000005f82015250565b5f6145b5600483613a50565b91506145c082614581565b600482019050919050565b5f6145d68287613aca565b91506145e28286614439565b6001820191506145f182614478565b91506145fd8285613aca565b9150614608826145a9565b91506146148284613aca565b915061461f82614478565b915081905095945050505050565b5f6146388286613aca565b915061464382614478565b915061464f8285613aca565b915061465a826145a9565b91506146668284613aca565b915061467182614478565b9150819050949350505050565b5f6146898286613aca565b91506146958285614439565b6001820191506146a58284614439565b600182019150819050949350505050565b5f6146c18285613aca565b91506146cd8284614439565b6001820191508190509392505050565b5f6146e78261360a565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036147195761471861373a565b5b600182019050919050565b5f61472e82613032565b915061473983613032565b925082820261474781613032565b9150828204841483151761475e5761475d61373a565b5b5092915050565b5f60ff82169050919050565b5f61477b82614765565b915061478683614765565b9250828201905060ff81111561479f5761479e61373a565b5b92915050565b5f6147af82613032565b91505f82036147c1576147c061373a565b5b600182039050919050565b7f5c5c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f614800600283613a50565b915061480b826147cc565b600282019050919050565b5f6148218284613aca565b915061482c826147f4565b915081905092915050565b7f5c220000000000000000000000000000000000000000000000000000000000005f82015250565b5f61486b600283613a50565b915061487682614837565b600282019050919050565b5f61488c8284613aca565b91506148978261485f565b915081905092915050565b7f5c2f0000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148d6600283613a50565b91506148e1826148a2565b600282019050919050565b5f6148f78284613aca565b9150614902826148ca565b915081905092915050565b7f5c740000000000000000000000000000000000000000000000000000000000005f82015250565b5f614941600283613a50565b915061494c8261490d565b600282019050919050565b5f6149628284613aca565b915061496d82614935565b915081905092915050565b7f5c660000000000000000000000000000000000000000000000000000000000005f82015250565b5f6149ac600283613a50565b91506149b782614978565b600282019050919050565b5f6149cd8284613aca565b91506149d8826149a0565b915081905092915050565b7f5c6e0000000000000000000000000000000000000000000000000000000000005f82015250565b5f614a17600283613a50565b9150614a22826149e3565b600282019050919050565b5f614a388284613aca565b9150614a4382614a0b565b915081905092915050565b7f5c720000000000000000000000000000000000000000000000000000000000005f82015250565b5f614a82600283613a50565b9150614a8d82614a4e565b600282019050919050565b5f614aa38284613aca565b9150614aae82614a76565b915081905092915050565b7f5c620000000000000000000000000000000000000000000000000000000000005f82015250565b5f614aed600283613a50565b9150614af882614ab9565b600282019050919050565b5f614b0e8284613aca565b9150614b1982614ae1565b915081905092915050565b5f614b2e8261360a565b91507f80000000000000000000000000000000000000000000000000000000000000008203614b6057614b5f61373a565b5b60018203905091905056fea2646970667358221220dbcaab09d0e7fffb1f03f72bcb76ed227c46c9d8b776bcea42a75a2f7bc4b2e164736f6c63430008140033";
const { error } = require("console");

let accounts;
let marketplace;
beforeEach(async () => {
	accounts = await web3.eth.getAccounts();
	marketplace = await new web3.eth.Contract(abi).deploy({ data: bytecode }).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
});

describe("Marketplace", () => {
	//deploy test contract
	it("Deploys a contract", () => {
		assert.ok(marketplace.options.address);
	});
	//--------------------------------------------------------------------------------------------------------------------------------
	//Constructor test
	it("Create the constructor", async () => {
		const managerAddr = await marketplace.methods.manager().call();
		assert.equal(managerAddr, accounts[0]);
	});
	//------------------------------------------------------------------------------------------------------------------------------------
	//add item test
	//add item
	it("Adds an item", async () => {
		await marketplace.methods.addItem(1, "SU", "Tea", 5, 2).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		const newItem = await marketplace.methods.itemList(0).call();
		assert.equal(newItem.location, "SU");
	});
	//check to make sure representive is not using the function
	it("Adds an item without manager status", async () => {
		try {
			await marketplace.methods.addItem(1, "SU", "Tea", 5, 2).send({ from: accounts[1] });
			assert.fail("this should produce an error");
		} catch (error) {
			chai.assert.toString(error.message, "only the manager can use this function");
		}
	});
	//----------------------------------------------------------------------------------------------------------------------------------
	//addRep test
	//addRep
	it("Adds a representative", async () => {
		await marketplace.methods.addRep(accounts[1], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		const newRep = await marketplace.methods.representatives(0).call();
		assert.equal(newRep.rep, accounts[1]);
	});
	//check to see if the manager is using the function and not the representative
	it("Adds a representative wtihout manager status", async () => {
		try {
			await marketplace.methods.addRep(accounts[1], "324 prez drive").send({ from: accounts[1], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});
	// check if location is a size zero
	it("Adds a representative without location", async () => {
		try {
			await marketplace.methods.addRep('0x5B38Da6a701c568545dCfcB03FcB875f56beddC4', "").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});
	//--------------------------------------------------------------------------------------------------------------------------------
	//removeRep test
	//removeRep
	it("Removes a representative", async () => {
		await marketplace.methods.addRep(accounts[1], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		await marketplace.methods.removeRep(accounts[1]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		assert.equal(await marketplace.methods.isRep(accounts[1]).call(), false);
	});
	//check to see if the manager is using the function and not the representative
	it("Removes a representative without manager status", async () => {
		try {
			await marketplace.methods.addRep(accounts[1], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
			await marketplace.methods.addRep(accounts[1]).send({ from: accounts[1], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});
	//---------------------------------------------------------------------------------------------------------------------------------
	// changeMarketPrice test
	// changeMarketPrice

	it("Changes the price of an item in the marketplace", async () => {
		//Add item
		await marketplace.methods.addItem(1, "SU", "Tea", 10, 5).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Add as rep
		await marketplace.methods.addRep(accounts[0], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Request item
		await marketplace.methods.requestItem([1]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Approve our request
		await marketplace.methods.approveRequest(accounts[0]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Change the price
		await marketplace.methods.changeMarketPrice(1, 8).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		const item = await marketplace.methods.marketplaceItems(0).call();
		assert.equal(item.price, 8);
	});

	it("Fails to change price for non-representative", async () => {
		await marketplace.methods.addItem(1, "SU", "Tea", 10, 5).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		try {
			await marketplace.methods.changeMarketPrice(1, 8).send({ from: accounts[1], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});
	//---------------------------------------------------------------------------------------------------------------------------------
	// requestItem test
	// requestItem
	it("Requests an item", async () => {
        await marketplace.methods.addRep(accounts[1], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
        await marketplace.methods.addItem(1, "SU", "Tea", 5, 2).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
        await marketplace.methods.requestItem([1]).send({ from: accounts[1], gasPrice: 8000000000, gas: 4700000 });

        const request = await marketplace.methods.getRequestAddress(accounts[1]).call();

		assert.equal(request, accounts[1]);
    });

	//---------------------------------------------------------------------------------------------------------------------------------
	// removeFromMarketplace test
	// removeFromMarketplace
	it("Removes an item from the marketplace", async () => {
		//Add item
		await marketplace.methods.addItem(1, "SU", "Tea", 10, 5).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Add as rep
		await marketplace.methods.addRep(accounts[0], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Request item
		await marketplace.methods.requestItem([1]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Approve our request
		await marketplace.methods.approveRequest(accounts[0]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Remove the item
		await marketplace.methods.removeFromMarketplace(1, 1, 0).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		const item = await marketplace.methods.marketplaceItems(0).call();
		assert.equal(item.quant, 9);
	});

	it("Removes an item as a non-representative", async () => {
		//Add item
		await marketplace.methods.addItem(1, "SU", "Tea", 10, 5).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Add as rep
		await marketplace.methods.addRep(accounts[0], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Request item
		await marketplace.methods.requestItem([1]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Approve our request
		await marketplace.methods.approveRequest(accounts[0]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Remove the item
		try {
			await marketplace.methods.removeFromMarketplace(1, 1, 0).send({ from: accounts[1], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});

	it("Removes an item with bad flag", async () => {
		//Add item
		await marketplace.methods.addItem(1, "SU", "Tea", 10, 5).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Add as rep
		await marketplace.methods.addRep(accounts[0], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Request item
		await marketplace.methods.requestItem([1]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Approve our request
		await marketplace.methods.approveRequest(accounts[0]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Remove the item
		try {
			await marketplace.methods.removeFromMarketplace(1, 1, 3).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});

	it("Removes an item with bad quantity", async () => {
		//Add item
		await marketplace.methods.addItem(1, "SU", "Tea", 10, 5).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Add as rep
		await marketplace.methods.addRep(accounts[0], "SU").send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Request item
		await marketplace.methods.requestItem([1]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Approve our request
		await marketplace.methods.approveRequest(accounts[0]).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
		//Remove the item
		try {
			await marketplace.methods.removeFromMarketplace(1, 100, 0).send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
			assert.fail("This should produce an error!");
		} catch (error) {
			chai.assert.include(error.message, "", "Test failed!");
		}
	});
	//---------------------------------------------------------------------------------------------------------------------------------
	//publishItems test
	//publishItems
	//Deprecated non-use function needs no test
	// it("publish Items", async () => {
	//     await marketplace.methods.publishItems().send({ from: accounts[0], gasPrice: 8000000000, gas: 4700000 });
	// });
	// it("publish Items", async () => {
	//     try {
	//         await marketplace.methods.publishItems().send({ from: accounts[1], gasPrice: 8000000000, gas: 4700000 });
	//     } catch (error) {
	//         chai.assert.include(error.message, "only the manager can use the function");
	//     }
	// });
});